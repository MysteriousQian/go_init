// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.9
// source: accountService.proto

package accountProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ServerAccountService_SyncAccount_FullMethodName = "/accountProto.ServerAccountService/SyncAccount"
)

// ServerAccountServiceClient is the client API for ServerAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务端 账号全量同步GRPC服务
type ServerAccountServiceClient interface {
	SyncAccount(ctx context.Context, in *ServerAccountRequest, opts ...grpc.CallOption) (*ServerAccountResponse, error)
}

type serverAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerAccountServiceClient(cc grpc.ClientConnInterface) ServerAccountServiceClient {
	return &serverAccountServiceClient{cc}
}

func (c *serverAccountServiceClient) SyncAccount(ctx context.Context, in *ServerAccountRequest, opts ...grpc.CallOption) (*ServerAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerAccountResponse)
	err := c.cc.Invoke(ctx, ServerAccountService_SyncAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerAccountServiceServer is the server API for ServerAccountService service.
// All implementations must embed UnimplementedServerAccountServiceServer
// for forward compatibility
//
// 服务端 账号全量同步GRPC服务
type ServerAccountServiceServer interface {
	SyncAccount(context.Context, *ServerAccountRequest) (*ServerAccountResponse, error)
	mustEmbedUnimplementedServerAccountServiceServer()
}

// UnimplementedServerAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerAccountServiceServer struct {
}

func (UnimplementedServerAccountServiceServer) SyncAccount(context.Context, *ServerAccountRequest) (*ServerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAccount not implemented")
}
func (UnimplementedServerAccountServiceServer) mustEmbedUnimplementedServerAccountServiceServer() {}

// UnsafeServerAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerAccountServiceServer will
// result in compilation errors.
type UnsafeServerAccountServiceServer interface {
	mustEmbedUnimplementedServerAccountServiceServer()
}

func RegisterServerAccountServiceServer(s grpc.ServiceRegistrar, srv ServerAccountServiceServer) {
	s.RegisterService(&ServerAccountService_ServiceDesc, srv)
}

func _ServerAccountService_SyncAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAccountServiceServer).SyncAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAccountService_SyncAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAccountServiceServer).SyncAccount(ctx, req.(*ServerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerAccountService_ServiceDesc is the grpc.ServiceDesc for ServerAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accountProto.ServerAccountService",
	HandlerType: (*ServerAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncAccount",
			Handler:    _ServerAccountService_SyncAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accountService.proto",
}

const (
	ClientAccountService_SyncAccount_FullMethodName = "/accountProto.ClientAccountService/SyncAccount"
)

// ClientAccountServiceClient is the client API for ClientAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 客户端 账号增量同步GRPC服务
type ClientAccountServiceClient interface {
	SyncAccount(ctx context.Context, in *ClientAccountRequest, opts ...grpc.CallOption) (*ClientAccountResponse, error)
}

type clientAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientAccountServiceClient(cc grpc.ClientConnInterface) ClientAccountServiceClient {
	return &clientAccountServiceClient{cc}
}

func (c *clientAccountServiceClient) SyncAccount(ctx context.Context, in *ClientAccountRequest, opts ...grpc.CallOption) (*ClientAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientAccountResponse)
	err := c.cc.Invoke(ctx, ClientAccountService_SyncAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientAccountServiceServer is the server API for ClientAccountService service.
// All implementations must embed UnimplementedClientAccountServiceServer
// for forward compatibility
//
// 客户端 账号增量同步GRPC服务
type ClientAccountServiceServer interface {
	SyncAccount(context.Context, *ClientAccountRequest) (*ClientAccountResponse, error)
	mustEmbedUnimplementedClientAccountServiceServer()
}

// UnimplementedClientAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientAccountServiceServer struct {
}

func (UnimplementedClientAccountServiceServer) SyncAccount(context.Context, *ClientAccountRequest) (*ClientAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAccount not implemented")
}
func (UnimplementedClientAccountServiceServer) mustEmbedUnimplementedClientAccountServiceServer() {}

// UnsafeClientAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientAccountServiceServer will
// result in compilation errors.
type UnsafeClientAccountServiceServer interface {
	mustEmbedUnimplementedClientAccountServiceServer()
}

func RegisterClientAccountServiceServer(s grpc.ServiceRegistrar, srv ClientAccountServiceServer) {
	s.RegisterService(&ClientAccountService_ServiceDesc, srv)
}

func _ClientAccountService_SyncAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccountServiceServer).SyncAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientAccountService_SyncAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccountServiceServer).SyncAccount(ctx, req.(*ClientAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientAccountService_ServiceDesc is the grpc.ServiceDesc for ClientAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accountProto.ClientAccountService",
	HandlerType: (*ClientAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncAccount",
			Handler:    _ClientAccountService_SyncAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accountService.proto",
}
