// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.9
// source: flowService.proto

package flowProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ServerFlowService_SyncFlow_FullMethodName = "/flowProto.ServerFlowService/SyncFlow"
)

// ServerFlowServiceClient is the client API for ServerFlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务端 流量信息同步GRPC服务
type ServerFlowServiceClient interface {
	SyncFlow(ctx context.Context, in *ServerFlowRequest, opts ...grpc.CallOption) (*ServerFlowResponse, error)
}

type serverFlowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerFlowServiceClient(cc grpc.ClientConnInterface) ServerFlowServiceClient {
	return &serverFlowServiceClient{cc}
}

func (c *serverFlowServiceClient) SyncFlow(ctx context.Context, in *ServerFlowRequest, opts ...grpc.CallOption) (*ServerFlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerFlowResponse)
	err := c.cc.Invoke(ctx, ServerFlowService_SyncFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerFlowServiceServer is the server API for ServerFlowService service.
// All implementations must embed UnimplementedServerFlowServiceServer
// for forward compatibility
//
// 服务端 流量信息同步GRPC服务
type ServerFlowServiceServer interface {
	SyncFlow(context.Context, *ServerFlowRequest) (*ServerFlowResponse, error)
	mustEmbedUnimplementedServerFlowServiceServer()
}

// UnimplementedServerFlowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerFlowServiceServer struct {
}

func (UnimplementedServerFlowServiceServer) SyncFlow(context.Context, *ServerFlowRequest) (*ServerFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFlow not implemented")
}
func (UnimplementedServerFlowServiceServer) mustEmbedUnimplementedServerFlowServiceServer() {}

// UnsafeServerFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerFlowServiceServer will
// result in compilation errors.
type UnsafeServerFlowServiceServer interface {
	mustEmbedUnimplementedServerFlowServiceServer()
}

func RegisterServerFlowServiceServer(s grpc.ServiceRegistrar, srv ServerFlowServiceServer) {
	s.RegisterService(&ServerFlowService_ServiceDesc, srv)
}

func _ServerFlowService_SyncFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerFlowServiceServer).SyncFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerFlowService_SyncFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerFlowServiceServer).SyncFlow(ctx, req.(*ServerFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerFlowService_ServiceDesc is the grpc.ServiceDesc for ServerFlowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerFlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flowProto.ServerFlowService",
	HandlerType: (*ServerFlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncFlow",
			Handler:    _ServerFlowService_SyncFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flowService.proto",
}
